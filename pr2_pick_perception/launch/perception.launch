<launch>
  <arg name="kinect_frame_prefix" default="/head_mount_kinect" />
  <arg name="kinect_camera_name" default="head_mount_kinect" />
  <arg name="debug_shelf" default="false" /> <!-- Set to true to not run the shelf localization node in this launch file. -->
  <arg name="debug_crop" default="false" /> <!-- Set to true to not run the shelf cropping node in this launch file. -->
  <arg name="debug_segmentation" default="false" /> <!-- Set to true to not run the item segmentation node in this launch file. -->
  <arg name="debug_openni" default="false" /> <!-- Set to true to not run openni in this launch file. -->
  <arg name="alternate_kinect_frames" default="false" />

  <!-- Turn on the Kinect -->
  <include file="$(find freenect_launch)/launch/freenect.launch" unless="$(arg debug_openni)">
    <arg name="depth_registration" value="true"/>
    <arg name="camera" value="head_mount_kinect"/>
    <arg unless="$(arg alternate_kinect_frames)" name="rgb_frame_id" value="$(arg kinect_frame_prefix)_rgb_optical_frame"/>
    <arg unless="$(arg alternate_kinect_frames)" name="depth_frame_id" value="$(arg kinect_frame_prefix)_depth_optical_frame"/>
    <arg if="$(arg alternate_kinect_frames)" name="rgb_frame_id" value="$(arg kinect_frame_prefix)_tuned_rgb_optical_frame"/>
    <arg if="$(arg alternate_kinect_frames)" name="depth_frame_id" value="$(arg kinect_frame_prefix)_tuned_ir_optical_frame"/>
    <arg name="publish_tf" value="false"/> <!-- We publish the tf ourselves with kinect_frame.launch -->
  </include>
  <include file="$(find pr2_pick_perception)/launch/kinect_frames.launch">
    <arg name="camera" value="head_mount_kinect" />
  </include>

  <!-- Tilt laser scan -->
  <node pkg="pr2_mechanism_controllers" type="send_periodic_cmd_srv.py" name="laser_tilt_controller_3dnav_params" 
    args="laser_tilt_controller linear 10 1.02 .31" />

  <!-- Pretouch optical sensor -->
  <include file="$(find pr2_pretouch_optical_dist)/launch/optic_pressure.launch" /> 

  <!-- Shelf services -->
  <!-- If you want debugging output, run these launch files separately on your local machine. -->
  <include unless="$(arg debug_shelf)" file="$(find pr2_pick_perception)/launch/shelf_recognition_LIDAR_PR2.launch">
    <arg name="debug" value="false" />
  </include>
  <include unless="$(arg debug_crop)" file="$(find pr2_pick_perception)/launch/crop_shelf.launch">
    <arg name="debug" value="false" />
  </include>
  <include unless="$(arg debug_segmentation)" file="$(find pr2_pick_perception)/launch/item_segmentation.launch">
    <arg name="debug" value="false" />
  </include>

  <!-- Point cloud processors. -->
  <node pkg="pr2_pick_perception" type="planar_pca_service_node" name="planar_pca_service_node" respawn="true" />
  <node pkg="pr2_pick_perception" type="item_descriptor_service_node" name="item_descriptor_service_node" respawn="true">
    <param name="color_histogram/num_bins" value="5" />
  </node>

  <node pkg="pr2_pick_perception" type="item_classifier_service.py" name="item_classifier" args="$(find pr2_pick_contest)/config/descriptors_5.bag" respawn="true" output="screen" />
  <node pkg="pr2_pick_perception" type="count_points_in_box_service_node" name="count_points_in_box_service_node" respawn="true" />
  <!-- <node pkg="pr2_pick_perception" type="cluster_points_in_box_service_node" name="cluster_points_in_box_service_node" respawn="true" /> -->

  <!-- Utilities -->
  <node pkg="pr2_pick_perception" type="static_tf.py" name="static_tf_service_node" respawn="true" />
  <node pkg="pr2_pick_perception" type="pcl_utilities.py" name="pcl_utilities" respawn="true" />
</launch>
